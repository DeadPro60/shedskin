TIPS

1) I sometimes see dictionaries used like this:

   statistics = {'nodes': 28, 'solutions', set()} 

   Shed Skin does not support this 'non-uniform' use of container types ('nodes' and 'solutions' have different types.) You can easily code around this problem by using a 'statistics' class:

   class statistics: pass
   s = statistics(); s.nodes = 28; s.solutions = set()

2) The type analysis may currently end up in an infinite loop; if this happens, it sometimes helps to run Shedskin with the --infinite command-line option. 

3) Having abstract types means you can not only use custom classes, but also _builtin_ Python container classes in an abstract way, e.g., as follows:
   
   a = [1,2,3]
   a = (1,2,3)
   for e in a: print e      # 'a' is an abstract sequence of type 'int'!

   b = {1: '1', 2: '2', 3: '3'} 
   b = xrange(10)           # 'b' is an abstract iterable of type 'int'!
   for e in b: print e

4) Not only builtin Python container classes can be used in a generic way (a list with integers becomes a generic list<int>, for example), but also _custom_ classes. For the following code, 'm1' and 'm2' become a matrix<int> and a matrix<double>, respectively:

   class matrix:
      def __init__(self, hop):
         self.unit = hop

   m1 = matrix([1,2])
   m2 = matrix([1.0, 2.0])

5) The evaluation order of arguments to 'print' changes with translation to C++. While this may be fixed later, for now it's better not to depend on this order (e.g., by using separate print statements):
    
   print f(), g() # in generated code, g is called before f!
   print 'hoei', raw_input() # raw_input is called before 'hoei' is printed!

6) While tuples with different types of elements with length > 2 are not yet supported, it can be useful to simulate them: 

   a = (1, '1', 1.0) # not supported
   a = (1, ('1', 1.0)) # supported


THANKS 

Thanks to Google, for sponsoring this project via their SoC program; to Bearophile and Luis M. Gonzalez, for finding bugs/missing features and for keeping me motivated; to Jeff Miller, for implementing the random module; and to Denis de Leeuw Duarte for helping me run Shed Skin under OSX.




