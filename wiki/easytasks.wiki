#summary Easy tasks to get involved in Shedskin development

= easy issues =

http://code.google.com/p/shedskin/issues/detail?id=62

http://code.google.com/p/shedskin/issues/detail?id=111

http://code.google.com/p/shedskin/issues/detail?id=108

http://code.google.com/p/shedskin/issues/detail?id=120

= improve IO speed =

IO in shedskin is SLOW. file IO (file, pipes, cStringIO) is currently per-character. print speed can also still be much improved (this is more difficult though).

= string formatting performance =

the important __modfill function in lib/builtin.cpp can probably become a lot faster by building the result in one go, instead of using many intermediate allocations.

= refactoring =

many places in the shedskin python code are in need of some serious refactoring. just browsing through the code will show lots of code that does more or less the same thing. some parts may not be used anymore, etc. etc.

= itertools.product =

the performance of this common function can be improved in at least two ways, as was done for the zip(a,b) implementation: preallocate tuples if their number is known, and use FOR_IN type iteration.

= extension module improvements =

we could use more tests (see tests/run.py). support for class-level attributes and properties would be nice.

= exception hierarchy =

there's some low-hanging fruit here, for example de-duplicate stuff between OSError and IOError.

= string support =

profile and optimize commonly used string methods

= struct and ieee754 =

(un)packing floats on hardware that doesn't natively use ieee754 format currently doesn't work.

= list implementation =

currently we use an STL vector internally. it should probably be faster to use our own cpython-based implementation, and GC_MALLOC_ATOMIC when possible (as was done for the set and dict classes). probably not that easy, but a proof-of-concept would be very interesting.