#summary documentation

=Shed Skin Documentation=

Version 0.8, July 24 2011, Mark Dufour and James Coughlan

<wiki:toc max_depth="1" />

= Introduction =

**Shed Skin** is an experimental **Python-to-C++ compiler** designed to speed up the execution of computation-intensive Python programs. It converts programs written in a restricted subset of Python to C++. The C++ code can be compiled to executable code, which can be run either as a standalone program or as an extension module easily imported and used in a regular Python program.

**Shed Skin** uses type inference techniques to determine the implicit types used in a Python program, in order to generate the explicit type declarations needed in a C++ version. Because C++ is statically typed, **Shed Skin** requires Python code to be written such that all variables are (implicitly!) statically typed.

Besides the typing and subset restrictions, supported programs cannot freely use the Python standard library, although 22 common modules are supported, such as *random* and *re* (see [#Library_Limitations Library Limitations]).

Additionally, the type inference techniques employed by **Shed Skin** currently do not scale very well beyond several thousand lines of code (the largest compiled program is about 3,000 lines (sloccount)). In all, this means that **Shed Skin** is currently mostly useful to compile smallish programs and extension modules, that do not make extensive use of dynamic Python features or the standard or external libraries. See [http://gitorious.org/shedskin/mainline/trees/master/examples here for about 60 example programs.

Because **Shed Skin** is still in an early stage of development, it can also improve a lot. At the moment, you will probably run into some bugs when using it. Please report these, so they can be fixed!

At the moment, **Shed Skin** is compatible with Python versions 2.4 to 2.7, behaves like 2.6, and should work on Windows and most UNIX platforms, such as GNU/Linux and OSX. On UNIX platforms, GCC version 4.2 or higher is required to compile the resulting C++ code.

= Typing Restrictions =

**Shed Skin** translates pure, but implicitly statically typed, Python programs into C++. The static typing restriction means that variables can only ever have a single, static type. So, for example, 

{{{
a = 1
a = '1' # bad
}}}

is not allowed. However, as in C++, types can be abstract, so that for example,

{{{
a = A()
a = B() # good
}}}

where *A* and *B* have a common base class, is allowed.

The typing restriction also means that the elements of some collection (*list*, *set*, etc.) cannot have different types (because their subtype must also be static). Thus:

{{{
a = ['apple', 'b', 'c'] # good
b = (1, 2, 3) # good
c = [[10.3, -2.0], [1.5, 2.3], []] # good
}}}

is allowed, but

{{{
d = [1, 2.5, 'abc'] # bad
e = [3, [1, 2]] # bad
f = (0, 'abc', [1, 2, 3]) # bad
}}}

is not allowed. Dictionary keys and values may be of different types:

{{{
g = {'a': 1, 'b': 2, 'c': 3} # good
h = {'a': 1, 'b': 'hello', 'c': [1, 2, 3]} # bad
}}}

In the current version of **Shed Skin**, mixed types are also permitted in tuples of length two:

{{{
a = (1, [1]) # good
}}}

In the future, mixed tuples up to a certain length will probably be allowed.

*None* may only be mixed with non-scalar types (i.e., not with *int*, *float* or *complex*):

{{{
l = [1]
l = None # good

m = 1
m = None # bad

def fun(x = None): # bad: use a special value for x here, e.g. x = -1
    pass
fun(1)
}}}

Integers and floats can often be mixed, but it is better to avoid this where possible, as it may confuse **Shed Skin**:

{{{
a = [1.0]
a = [1] # wrong - use a float here, too
}}}

= Python Subset Restrictions =

**Shed Skin** will only ever support a subset of all Python features. The following common features are currently not supported:

 * *eval*, *getattr*, *hasattr*, *isinstance*, meta classes, anything really dynamic
 * arbitrary-size arithmetic (integers become 32-bit by default on most architectures, see [#Command-line_Options Command-line Options])
 * variable numbers of arguments and keyword arguments
 * multiple inheritance
 * nested functions and classes
 * unicode
 * inheritance from builtins (excluding *Exception* and *object*)
 * overloading `__iter__` and `__call__`
 * closures

Some other features are currently only partially supported:

 * class attributes must always be accessed using a class identifier:

{{{
        self.class_attr # bad
        SomeClass.class_attr # good
        SomeClass.some_static_method() # good
}}}

 * function references can be passed around, but not method references, and they cannot be contained:

{{{
        var = lambda x, y: x+y # good
        var = some_func # good
        var = self.some_method # bad, method reference
        [var] # bad, contained
}}}

= Library Limitations =

Programs to be compiled with **Shed Skin** cannot freely use the Python standard library. At the moment, the following 24 modules are largely supported. Several of these, such as *os.path*, were compiled to C++ using **Shed Skin**.

 * *array*
 * *binascii*
 * *bisect*
 * *collections* (defaultdict, deque)
 * *ConfigParser* (no SafeConfigParser)
 * *copy*
 * *csv* (no Dialect, Sniffer)
 * *datetime*
 * *fnmatch*
 * *getopt*
 * *glob*
 * *heapq*
 * *itertools* (no starmap)
 * *math*
 * *mmap*
 * *os*
 * *os.path*
 * *random*
 * *re*
 * *socket*
 * *string*
 * *struct* (no Struct, pack_into, unpack_from)
 * *sys*
 * *time*

Note that any other module, such as *pygame*, *pyqt* or *pickle*, may be used in combination with a Shed Skin generated [#Generating_an_Extension_Module extension module]. For examples of this, see the [http://gitorious.org/shedskin/mainline/trees/master/examples Shed Skin examples].

See [#How_to_help_out_in_Development How to help out in Development] on how to help improve or add to the set of supported modules.

= Installation =

= Compiling a Stand-Alone Program = 

= Generating an Extension Module =

= Distributing Binaries = 

= Parallel Processing =

= Calling C/C++ Code =

= Command-line Options = 

= Performance Tips and Tricks =

= How to help out in Development =